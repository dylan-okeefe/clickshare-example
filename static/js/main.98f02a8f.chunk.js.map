{"version":3,"sources":["containers/header.js","containers/landing.js","containers/index.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Landing","Index","header_Header","react_router","path","component","Boolean","window","location","hostname","match","routing","react_router_dom","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAEqBA,mLAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,cAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,mCAfQE,aCAfC,mLAEb,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,iEAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAGfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,oMAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,uCAMRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAGfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,oMAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,uCAMRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAGfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,oMAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,gDAtDSC,oBCIhBE,mLAEb,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACK,EAAD,MACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWL,YALZD,qBCMfO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACFhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWJ,KAInCY,IAASC,OAAOH,EAASI,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98f02a8f.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Header extends Component {\n    render() {\n        return(\n            <div className=\"header\">\n                <div className=\"logo\">\n                    clickshare\n                </div>\n                <div className=\"nav\">\n                    <nav>\n                        <ul>\n                            <li>Serices</li>\n                            <li>Partners</li>\n                            <li>FAQ</li>\n                            <li>Mission</li>\n                            <li>About Us</li>\n                            <li>Contact Us</li>\n                        </ul>\n                    </nav>\n                </div>\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nexport default class Landing extends Component {\n    render(){\n        return(\n            <div className=\"landing-body\">\n                <div className=\"landing-header\">\n                    AUTHENTICATION AND E-COMMERCE FOR ALL ASPECTS OF DIGITAL LIFE\n\n                </div>\n                <div className=\"landing-cards-container\">\n                    <div className=\"landing-card\">\n                        <div className=\"card-content\">\n                            <div className=\"card-icon\">\n\n                            </div>\n                            <div className=\"card-header\">\n                                Example\n                            </div>\n                            <div className=\"card-content\">\n                                heres an example of some copy for a card. it should explain some things on a higher level but also not be too verbose. maybe another sentence or two, but you want them to be easily digestable.\n                            </div>\n                            <div className=\"card-link\">\n                                read more about the content here.\n                            </div>\n\n                        </div>\n                    </div>\n                    <div className=\"landing-card\">\n                        <div className=\"card-content\">\n                            <div className=\"card-icon\">\n\n                            </div>\n                            <div className=\"card-header\">\n                                Example\n                            </div>\n                            <div className=\"card-content\">\n                                heres an example of some copy for a card. it should explain some things on a higher level but also not be too verbose. maybe another sentence or two, but you want them to be easily digestable.\n                            </div>\n                            <div className=\"card-link\">\n                                read more about the content here.\n                            </div>\n\n                        </div>\n                    </div>\n                    <div className=\"landing-card\">\n                        <div className=\"card-content\">\n                            <div className=\"card-icon\">\n\n                            </div>\n                            <div className=\"card-header\">\n                                Example\n                            </div>\n                            <div className=\"card-content\">\n                                heres an example of some copy for a card. it should explain some things on a higher level but also not be too verbose. maybe another sentence or two, but you want them to be easily digestable.\n                            </div>\n                            <div className=\"card-link\">\n                                read more about the content here.\n                            </div>\n\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport Header from './header'\nimport Landing from './landing'\nimport { Redirect } from 'react-router'\nimport { Route, Switch, Link, BrowserRouter as Router } from 'react-router-dom'\n\nexport default class Index extends Component {\n    render() {\n        return(\n            <div className=\"background\">\n                <Header />\n                    <Route path=\"/\" component={Landing}/>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Index from './containers/index';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n    <Router>\n        <Route path=\"/\" component={Index}/>\n    </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}